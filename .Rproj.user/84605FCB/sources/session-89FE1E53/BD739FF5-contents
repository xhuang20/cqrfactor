rm(list = ls())

library(cqrfactor)
library(cqrfactor.test)

# NOTES  

# Confirm the factor loading part is correct.
# Use the eigenvector initialization in the cpp code for loadings.
# When setting tt = nn = 200 or a larger number, the CQR cpp code for loading 
# estimation almost reproduces the same loading from factor analysis. There is 
# some small difference in the estimated factor between those from CQR cpp code 
# and the factor analysis. I think it's OK.

# To use the Random initialization, unquote the //MatrixXd fmat0 = MatrixXd::Random(t,r);
# in the cpp code.
# If we use the Random initialization for the loading matrix, when sample is 
# large, tt = nn = 500, we get the fitted MSE still very close to that of
# factor analysis. But the estimated loading is different from that of factor
# analysis. The estimated factors are also different.

# Confirm the factor estimation part is correct.
# Use the eigenvector initialization in the cpp code for factors.
# When setting tt = nn = 200 or a larger numer, the CQR cpp code for factor
# estimation almost reproduces the same factor from factor analysis. There is 
# some small difference in the estimated factor loading between those from CQR
# cpp code and the factor analysis.

# If we use the Random initialization for the factors, when sample is large,
# tt = nn = 200, we get the fitted MSE still very close to that of factor analysis.
# The estimated factor and factor loadings are somewhat different between the
# CQR cpp code and the R factor analysis code.

# 2023-2-24








tt = 20
nn = 20
r  = 3
q  = 9
tau = (1:q) / (q + 1) 

set.seed(2023)
lmat = matrix(rnorm(nn*r), nn, r)
fmat = matrix(rnorm(tt*r), tt, r)
u    = matrix(rnorm(tt*nn), tt, nn)
dat    = fmat %*% t(lmat) + u 

a = cqrfactor.test::cqrfactor(y = dat, q = q, r = r, maxit = 10, maxit_factor = 500, 
              maxit_loading = 500, tol = 1e-4, seed = 1) # c++ code

b = cqrfactor::cqrfactor(y = dat, q = q, r = r, maxit = 10, maxit_factor = 500, 
                         maxit_loading = 500, tol = 1e-4)

print(head(a$fmat))

print(head(b$fmat))

# Check large data set.
tt = 10
nn = 20
r  = 3
q  = 5
tau = (1:q) / (q + 1) 

set.seed(2023)
lmat = matrix(rnorm(nn*r), nn, r)
fmat = matrix(rnorm(tt*r), tt, r)
u    = matrix(rnorm(tt*nn), tt, nn)
dat1    = fmat %*% t(lmat) + u 

# bb = cqrfactor::cqrfactor(y = dat1, q = q, r = r, maxit = 100, maxit_factor = 500, 
#                      maxit_loading = 500, tol = 1e-6, minconver = 1)
bb = cqrfactor::factor_number(y = dat1, q = q,  maxit = 100, maxit_factor = 500, 
                   maxit_loading = 500, tol = 1e-6, minconver = 1, max_number = 10)

print(bb)



