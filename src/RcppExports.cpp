// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Quantile
Rcpp::NumericVector Quantile(Rcpp::NumericVector x, Rcpp::NumericVector probs);
RcppExport SEXP _cqrfactor_Quantile(SEXP xSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(Quantile(x, probs));
    return rcpp_result_gen;
END_RCPP
}
// mmfactor
Rcpp::List mmfactor(const Eigen::MatrixXd& y, const Eigen::VectorXd& tau, int q, int r, double tol, int maxit, int maxit_factor, int maxit_loading, int convergence, int seed);
RcppExport SEXP _cqrfactor_mmfactor(SEXP ySEXP, SEXP tauSEXP, SEXP qSEXP, SEXP rSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP maxit_factorSEXP, SEXP maxit_loadingSEXP, SEXP convergenceSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type maxit_factor(maxit_factorSEXP);
    Rcpp::traits::input_parameter< int >::type maxit_loading(maxit_loadingSEXP);
    Rcpp::traits::input_parameter< int >::type convergence(convergenceSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(mmfactor(y, tau, q, r, tol, maxit, maxit_factor, maxit_loading, convergence, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cqrfactor_Quantile", (DL_FUNC) &_cqrfactor_Quantile, 2},
    {"_cqrfactor_mmfactor", (DL_FUNC) &_cqrfactor_mmfactor, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_cqrfactor(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
